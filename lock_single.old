---------------------------- MODULE lock_single ----------------------------

EXTENDS lock_data

(* --algorithm lock_system

\*****************************
\* Define global variables
\*****************************
variables
  \* Variables for locks
  lockOrientation = "west_low",
  doorsOpen = [ls \in LockSide |-> FALSE],
  valvesOpen = [vs \in ValveSide |-> FALSE],
  waterLevel = "low",
  
  \* Variables for single ship
  shipLocation = 0,
  shipStatus = "go_to_east",
  
  \* Command for lock
  \* for command "change_door" the side should be "west" or "east"
  \* for command "change_valve" the side should be "high" or "low"
  lockCommand = [command |-> "finished", open |-> FALSE, side |-> "west"],
  \* Central requests of all ships
  requests = << >>,
  \* Permissions per ship
  permissions = << >>;

define

\*****************************
\* Helper functions
\*****************************
\* Check if ship is within the lock
InLock == IsLock(shipLocation)


\*****************************
\* Type checks
\*****************************
\* Check that variables use the correct type
TypeOK == /\ lockOrientation \in LockOrientation
          /\ \A ls \in LockSide : doorsOpen[ls] \in BOOLEAN
          /\ \A vs \in ValveSide : valvesOpen[vs] \in BOOLEAN
          /\ waterLevel \in WaterLevel
          /\ lockCommand.command \in LockCommand
          /\ lockCommand.open \in BOOLEAN
          /\ lockCommand.side \in LockSide \union ValveSide
          /\ shipLocation \in Locations
          /\ shipStatus \in ShipStatus
          /\ \A i \in 1..Len(permissions):
               /\ permissions[i].lock \in Locks
               /\ permissions[i].granted \in BOOLEAN
          /\ \A i \in 1..Len(requests):
               /\ requests[i].ship \in Ships
               /\ requests[i].lock \in Locks
               /\ requests[i].side \in LockSide

\* Check that message queues are not overflowing
MessagesOK == /\ Len(requests) <= 1
              /\ Len(permissions) <= 1


\*****************************
\* Requirements on lock
\*****************************
\* The eastern pair of doors and the western pair of doors are never simultaneously open
DoorsMutex == ~(doorsOpen["west"] /\ doorsOpen["east"])

\* When the lower/higher pair of doors is open, the higher/lower valve is closed.
DoorsOpenValvesClosed == 
  /\ (doorsOpen[LowSide(lockOrientation)] => ~valvesOpen["high"])
  /\ (doorsOpen[HighSide(lockOrientation)] => ~valvesOpen["low"])

\* The lower/higher pair of doors is only open when the water level in the lock is low/high
DoorsOpenWaterlevelRight == 
  /\ (doorsOpen[LowSide(lockOrientation)] => waterLevel = "low")
  /\ (doorsOpen[HighSide(lockOrientation)] => waterLevel = "high")

\* Always if the ship requests to enter the lock, the ship will eventually be inside the lock.
RequestLockFulfilled == 
  \A s \in Ships : (shipLocation = 0 ~> InLock)

\* Water level is infinitely many times high/low
WaterlevelChange == 
  /\ []<>(waterLevel = "high")
  /\ []<>(waterLevel = "low")

\* Infinitely many times the ship does requests
RequestsShips == []<>(Len(requests) > 0)

\* Infinitely many times the ship reaches its end location
ShipsReachGoals == 
  /\ []<>(shipLocation = EastEnd)
  /\ []<>(shipLocation = WestEnd)

end define;


\*****************************
\* Helper macros
\*****************************

\* Update the water level according to the state of doors and valves
macro updateWaterLevel(lock_orientation, doors, valves, waterlevel) begin
  if valves["low"] then
      \* Water can flow out through valve
      waterlevel := "low";
  elsif (lock_orientation = "west_low" /\ doors["west"])
         \/ (lock_orientation = "east_low" /\ doors["east"]) then
      \* Water can flow out through lower door
      waterlevel := "low";
  elsif valves["high"] then
      \* Water can flow in through valve
      waterlevel := "high";
  elsif (lock_orientation = "west_low" /\ doors["east"])
         \/ (lock_orientation = "east_low" /\ doors["west"]) then
      \* Water can flow in through higher door
      waterlevel := "high";
  \* In other case, the water level stays the same
  end if;
end macro

\* Read res from queue.
\* The macro awaits a non-empty queue.
macro read(queue, res) begin
  await queue /= <<>>;
  res := Head(queue);
  queue := Tail(queue);
end macro

\* Write msg to the queue.
macro write(queue, msg) begin
  queue := Append(queue, msg);
end macro


\*****************************
\* Process for a lock
\*****************************
process lockProcess \in Locks
begin
  LockWaitForCommand:
    while TRUE do
      await lockCommand.command /= "finished";
      if lockCommand.command = "change_door" then
        \* Change status of door
        doorsOpen[lockCommand.side] := lockCommand.open;
      elsif lockCommand.command = "change_valve" then
        \* Change status of valve
        valvesOpen[lockCommand.side] := lockCommand.open;
      else
        \* should not happen
        assert FALSE;
      end if;
  LockUpdateWaterLevel:
      updateWaterLevel(lockOrientation, doorsOpen, valvesOpen, waterLevel);
  LockCommandFinished:
      lockCommand.command := "finished";    
    end while;
end process;


\*****************************
\* Process for a ship
\*****************************
process shipProcess \in Ships
variables
  perm = [lock |-> 1, granted |-> FALSE]
begin
  ShipNextIteration:
    while TRUE do
      if shipStatus = "go_to_east" then
        if shipLocation = EastEnd then
  ShipGoalReachedEast:
          shipStatus := "goal_reached";
        else
          if ~InLock then
  ShipRequestWest:
            \* Request west doors of lock
            write(requests, [ship |-> self, lock |-> 1, side |-> "west"]);
  ShipWaitForWest:
            \* Wait for permission
            read(permissions, perm);
            assert perm.lock = GetLock(shipLocation+1);
          else
  ShipRequestEastInLock:
            \* Request east doors of lock
            write(requests, [ship |-> self, lock |-> 1, side |-> "east"]);
  ShipWaitForEastInLock:
            \* Wait for permission
            read(permissions, perm);
            assert perm.lock = GetLock(shipLocation);
          end if;
  ShipMoveEast:
          if perm.granted then
            \* Move ship
            assert doorsOpen[IF InLock THEN "east" ELSE "west"];
            shipLocation := shipLocation + 1;
          end if;
        end if;
      elsif shipStatus = "go_to_west" then
        if shipLocation = WestEnd then
  ShipGoalReachedWest:
          shipStatus := "goal_reached";
        else
          if ~InLock then
  ShipRequestEast:
            \* Request east doors of lock
            write(requests, [ship |-> self, lock |-> 1, side |-> "east"]);
  ShipWaitForEast:
            \* Wait for permission
            read(permissions, perm);
            assert perm.lock = GetLock(shipLocation-1);
          else
  ShipRequestWestInLock:
            \* Request west doors of lock
            write(requests, [ship |-> self, lock |-> 1, side |-> "west"]);
  ShipWaitForWestInLock:
            \* Wait for permission
            read(permissions, perm);
            assert perm.lock = GetLock(shipLocation);
          end if;
  ShipMoveWest:
          if perm.granted then
            \* Move ship
            assert doorsOpen[IF InLock THEN "west" ELSE "east"];
            shipLocation := shipLocation - 1;
          end if;
        end if;
      else
        assert shipStatus = "goal_reached";
  ShipTurnAround:
        \* Turn around
        shipStatus := IF shipLocation = WestEnd THEN "go_to_east" ELSE "go_to_west";
      end if;
    end while;
end process;


\*****************************
\* Process for the controller
\*****************************
process controlProcess = 0
variables
  req = [ship |-> 2, lock |-> 1, side |-> "west"];
  targetWaterLevel = "low";
  requestedSide = "west";
  oppositeSide = "east";
begin
  ControlLoop:
    while TRUE do
      ControlReadRequest:
        \* Read next request from the queue
        read(requests, req);
        requestedSide := req.side;
        oppositeSide := IF requestedSide = "west" THEN "east" ELSE "west";
        
      ControlCloseDoors:
        \* First, ensure both doors are closed before changing water level
        if doorsOpen[requestedSide] then
          lockCommand := [command |-> "change_door", open |-> FALSE, side |-> requestedSide];
      ControlWaitCloseDoor1:
          await lockCommand.command = "finished";
      ControlCheckOppositeDoor:
          skip;
        end if;
        
      ControlCloseDoor2:
        if doorsOpen[oppositeSide] then
          lockCommand := [command |-> "change_door", open |-> FALSE, side |-> oppositeSide];
      ControlWaitCloseDoor2:
          await lockCommand.command = "finished";
      ControlDetermineTargetLevel:
          skip;
        end if;
        
      ControlSetTargetLevel:
        \* Determine target water level based on requested side and lock orientation
        if requestedSide = LowSide(lockOrientation) then
          targetWaterLevel := "low";
        else
          targetWaterLevel := "high";
        end if;
        
      ControlAdjustWaterLevel:
        \* Adjust water level to match the target
        if waterLevel /= targetWaterLevel then
          if targetWaterLevel = "low" then
            \* Open low valve to lower water
            lockCommand := [command |-> "change_valve", open |-> TRUE, side |-> "low"];
      ControlWaitValveLow:
            await lockCommand.command = "finished";
      ControlWaitWaterLow:
            await waterLevel = "low";
            \* Close low valve
            lockCommand := [command |-> "change_valve", open |-> FALSE, side |-> "low"];
      ControlWaitCloseValveLow:
            await lockCommand.command = "finished";
      ControlPrepareOpenDoor1:
            skip;
          else
            \* Open high valve to raise water
            lockCommand := [command |-> "change_valve", open |-> TRUE, side |-> "high"];
      ControlWaitValveHigh:
            await lockCommand.command = "finished";
      ControlWaitWaterHigh:
            await waterLevel = "high";
            \* Close high valve
            lockCommand := [command |-> "change_valve", open |-> FALSE, side |-> "high"];
      ControlWaitCloseValveHigh:
            await lockCommand.command = "finished";
      ControlPrepareOpenDoor2:
            skip;
          end if;
        end if;
        
      ControlOpenRequestedDoor:
        \* Now open the requested door
        lockCommand := [command |-> "change_door", open |-> TRUE, side |-> requestedSide];
      ControlWaitOpenDoor:
        await lockCommand.command = "finished";
        
      ControlGrantPermission:
        \* Grant permission to the ship
        write(permissions, [lock |-> req.lock, granted |-> TRUE]);
    end while;
end process;


end algorithm; *)


\* BEGIN TRANSLATION (chksum(pcal) = "8f58e95f" /\ chksum(tla) = "876ca390")
VARIABLES lockOrientation, doorsOpen, valvesOpen, waterLevel, shipLocation, 
          shipStatus, lockCommand, requests, permissions, pc

(* define statement *)
InLock == IsLock(shipLocation)






TypeOK == /\ lockOrientation \in LockOrientation
          /\ \A ls \in LockSide : doorsOpen[ls] \in BOOLEAN
          /\ \A vs \in ValveSide : valvesOpen[vs] \in BOOLEAN
          /\ waterLevel \in WaterLevel
          /\ lockCommand.command \in LockCommand
          /\ lockCommand.open \in BOOLEAN
          /\ lockCommand.side \in LockSide \union ValveSide
          /\ shipLocation \in Locations
          /\ shipStatus \in ShipStatus
          /\ \A i \in 1..Len(permissions):
               /\ permissions[i].lock \in Locks
               /\ permissions[i].granted \in BOOLEAN
          /\ \A i \in 1..Len(requests):
               /\ requests[i].ship \in Ships
               /\ requests[i].lock \in Locks
               /\ requests[i].side \in LockSide


MessagesOK == /\ Len(requests) <= 1
              /\ Len(permissions) <= 1






DoorsMutex == ~(doorsOpen["west"] /\ doorsOpen["east"])


DoorsOpenValvesClosed ==
  /\ (doorsOpen[LowSide(lockOrientation)] => ~valvesOpen["high"])
  /\ (doorsOpen[HighSide(lockOrientation)] => ~valvesOpen["low"])


DoorsOpenWaterlevelRight ==
  /\ (doorsOpen[LowSide(lockOrientation)] => waterLevel = "low")
  /\ (doorsOpen[HighSide(lockOrientation)] => waterLevel = "high")


RequestLockFulfilled ==
  \A s \in Ships : (shipLocation = 0 ~> InLock)


WaterlevelChange ==
  /\ []<>(waterLevel = "high")
  /\ []<>(waterLevel = "low")


RequestsShips == []<>(Len(requests) > 0)


ShipsReachGoals ==
  /\ []<>(shipLocation = EastEnd)
  /\ []<>(shipLocation = WestEnd)

VARIABLES perm, req, targetWaterLevel, requestedSide, oppositeSide

vars == << lockOrientation, doorsOpen, valvesOpen, waterLevel, shipLocation, 
           shipStatus, lockCommand, requests, permissions, pc, perm, req, 
           targetWaterLevel, requestedSide, oppositeSide >>

ProcSet == (Locks) \cup (Ships) \cup {0}

Init == (* Global variables *)
        /\ lockOrientation = "east_low"
        /\ doorsOpen = [ls \in LockSide |-> FALSE]
        /\ valvesOpen = [vs \in ValveSide |-> FALSE]
        /\ waterLevel = "low"
        /\ shipLocation = 0
        /\ shipStatus = "go_to_east"
        /\ lockCommand = [command |-> "finished", open |-> FALSE, side |-> "west"]
        /\ requests = << >>
        /\ permissions = << >>
        (* Process shipProcess *)
        /\ perm = [self \in Ships |-> [lock |-> 1, granted |-> FALSE]]
        (* Process controlProcess *)
        /\ req = [ship |-> 2, lock |-> 1, side |-> "west"]
        /\ targetWaterLevel = "low"
        /\ requestedSide = "west"
        /\ oppositeSide = "east"
        /\ pc = [self \in ProcSet |-> CASE self \in Locks -> "LockWaitForCommand"
                                        [] self \in Ships -> "ShipNextIteration"
                                        [] self = 0 -> "ControlLoop"]

LockWaitForCommand(self) == /\ pc[self] = "LockWaitForCommand"
                            /\ lockCommand.command /= "finished"
                            /\ IF lockCommand.command = "change_door"
                                  THEN /\ doorsOpen' = [doorsOpen EXCEPT ![lockCommand.side] = lockCommand.open]
                                       /\ UNCHANGED valvesOpen
                                  ELSE /\ IF lockCommand.command = "change_valve"
                                             THEN /\ valvesOpen' = [valvesOpen EXCEPT ![lockCommand.side] = lockCommand.open]
                                             ELSE /\ Assert(FALSE, 
                                                            "Failure of assertion at line 156, column 9.")
                                                  /\ UNCHANGED valvesOpen
                                       /\ UNCHANGED doorsOpen
                            /\ pc' = [pc EXCEPT ![self] = "LockUpdateWaterLevel"]
                            /\ UNCHANGED << lockOrientation, waterLevel, 
                                            shipLocation, shipStatus, 
                                            lockCommand, requests, permissions, 
                                            perm, req, targetWaterLevel, 
                                            requestedSide, oppositeSide >>

LockUpdateWaterLevel(self) == /\ pc[self] = "LockUpdateWaterLevel"
                              /\ IF valvesOpen["low"]
                                    THEN /\ waterLevel' = "low"
                                    ELSE /\ IF (lockOrientation = "west_low" /\ doorsOpen["west"])
                                                \/ (lockOrientation = "east_low" /\ doorsOpen["east"])
                                               THEN /\ waterLevel' = "low"
                                               ELSE /\ IF valvesOpen["high"]
                                                          THEN /\ waterLevel' = "high"
                                                          ELSE /\ IF (lockOrientation = "west_low" /\ doorsOpen["east"])
                                                                      \/ (lockOrientation = "east_low" /\ doorsOpen["west"])
                                                                     THEN /\ waterLevel' = "high"
                                                                     ELSE /\ TRUE
                                                                          /\ UNCHANGED waterLevel
                              /\ pc' = [pc EXCEPT ![self] = "LockCommandFinished"]
                              /\ UNCHANGED << lockOrientation, doorsOpen, 
                                              valvesOpen, shipLocation, 
                                              shipStatus, lockCommand, 
                                              requests, permissions, perm, req, 
                                              targetWaterLevel, requestedSide, 
                                              oppositeSide >>

LockCommandFinished(self) == /\ pc[self] = "LockCommandFinished"
                             /\ lockCommand' = [lockCommand EXCEPT !.command = "finished"]
                             /\ pc' = [pc EXCEPT ![self] = "LockWaitForCommand"]
                             /\ UNCHANGED << lockOrientation, doorsOpen, 
                                             valvesOpen, waterLevel, 
                                             shipLocation, shipStatus, 
                                             requests, permissions, perm, req, 
                                             targetWaterLevel, requestedSide, 
                                             oppositeSide >>

lockProcess(self) == LockWaitForCommand(self) \/ LockUpdateWaterLevel(self)
                        \/ LockCommandFinished(self)

ShipNextIteration(self) == /\ pc[self] = "ShipNextIteration"
                           /\ IF shipStatus = "go_to_east"
                                 THEN /\ IF shipLocation = EastEnd
                                            THEN /\ pc' = [pc EXCEPT ![self] = "ShipGoalReachedEast"]
                                            ELSE /\ IF ~InLock
                                                       THEN /\ pc' = [pc EXCEPT ![self] = "ShipRequestWest"]
                                                       ELSE /\ pc' = [pc EXCEPT ![self] = "ShipRequestEastInLock"]
                                 ELSE /\ IF shipStatus = "go_to_west"
                                            THEN /\ IF shipLocation = WestEnd
                                                       THEN /\ pc' = [pc EXCEPT ![self] = "ShipGoalReachedWest"]
                                                       ELSE /\ IF ~InLock
                                                                  THEN /\ pc' = [pc EXCEPT ![self] = "ShipRequestEast"]
                                                                  ELSE /\ pc' = [pc EXCEPT ![self] = "ShipRequestWestInLock"]
                                            ELSE /\ Assert(shipStatus = "goal_reached", 
                                                           "Failure of assertion at line 234, column 9.")
                                                 /\ pc' = [pc EXCEPT ![self] = "ShipTurnAround"]
                           /\ UNCHANGED << lockOrientation, doorsOpen, 
                                           valvesOpen, waterLevel, 
                                           shipLocation, shipStatus, 
                                           lockCommand, requests, permissions, 
                                           perm, req, targetWaterLevel, 
                                           requestedSide, oppositeSide >>

ShipGoalReachedEast(self) == /\ pc[self] = "ShipGoalReachedEast"
                             /\ shipStatus' = "goal_reached"
                             /\ pc' = [pc EXCEPT ![self] = "ShipNextIteration"]
                             /\ UNCHANGED << lockOrientation, doorsOpen, 
                                             valvesOpen, waterLevel, 
                                             shipLocation, lockCommand, 
                                             requests, permissions, perm, req, 
                                             targetWaterLevel, requestedSide, 
                                             oppositeSide >>

ShipMoveEast(self) == /\ pc[self] = "ShipMoveEast"
                      /\ IF perm[self].granted
                            THEN /\ Assert(doorsOpen[IF InLock THEN "east" ELSE "west"], 
                                           "Failure of assertion at line 200, column 13.")
                                 /\ shipLocation' = shipLocation + 1
                            ELSE /\ TRUE
                                 /\ UNCHANGED shipLocation
                      /\ pc' = [pc EXCEPT ![self] = "ShipNextIteration"]
                      /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                      waterLevel, shipStatus, lockCommand, 
                                      requests, permissions, perm, req, 
                                      targetWaterLevel, requestedSide, 
                                      oppositeSide >>

ShipRequestWest(self) == /\ pc[self] = "ShipRequestWest"
                         /\ requests' = Append(requests, ([ship |-> self, lock |-> 1, side |-> "west"]))
                         /\ pc' = [pc EXCEPT ![self] = "ShipWaitForWest"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, permissions, 
                                         perm, req, targetWaterLevel, 
                                         requestedSide, oppositeSide >>

ShipWaitForWest(self) == /\ pc[self] = "ShipWaitForWest"
                         /\ permissions /= <<>>
                         /\ perm' = [perm EXCEPT ![self] = Head(permissions)]
                         /\ permissions' = Tail(permissions)
                         /\ Assert(perm'[self].lock = GetLock(shipLocation+1), 
                                   "Failure of assertion at line 187, column 13.")
                         /\ pc' = [pc EXCEPT ![self] = "ShipMoveEast"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, requests, 
                                         req, targetWaterLevel, requestedSide, 
                                         oppositeSide >>

ShipRequestEastInLock(self) == /\ pc[self] = "ShipRequestEastInLock"
                               /\ requests' = Append(requests, ([ship |-> self, lock |-> 1, side |-> "east"]))
                               /\ pc' = [pc EXCEPT ![self] = "ShipWaitForEastInLock"]
                               /\ UNCHANGED << lockOrientation, doorsOpen, 
                                               valvesOpen, waterLevel, 
                                               shipLocation, shipStatus, 
                                               lockCommand, permissions, perm, 
                                               req, targetWaterLevel, 
                                               requestedSide, oppositeSide >>

ShipWaitForEastInLock(self) == /\ pc[self] = "ShipWaitForEastInLock"
                               /\ permissions /= <<>>
                               /\ perm' = [perm EXCEPT ![self] = Head(permissions)]
                               /\ permissions' = Tail(permissions)
                               /\ Assert(perm'[self].lock = GetLock(shipLocation), 
                                         "Failure of assertion at line 195, column 13.")
                               /\ pc' = [pc EXCEPT ![self] = "ShipMoveEast"]
                               /\ UNCHANGED << lockOrientation, doorsOpen, 
                                               valvesOpen, waterLevel, 
                                               shipLocation, shipStatus, 
                                               lockCommand, requests, req, 
                                               targetWaterLevel, requestedSide, 
                                               oppositeSide >>

ShipTurnAround(self) == /\ pc[self] = "ShipTurnAround"
                        /\ shipStatus' = (IF shipLocation = WestEnd THEN "go_to_east" ELSE "go_to_west")
                        /\ pc' = [pc EXCEPT ![self] = "ShipNextIteration"]
                        /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                        waterLevel, shipLocation, lockCommand, 
                                        requests, permissions, perm, req, 
                                        targetWaterLevel, requestedSide, 
                                        oppositeSide >>

ShipGoalReachedWest(self) == /\ pc[self] = "ShipGoalReachedWest"
                             /\ shipStatus' = "goal_reached"
                             /\ pc' = [pc EXCEPT ![self] = "ShipNextIteration"]
                             /\ UNCHANGED << lockOrientation, doorsOpen, 
                                             valvesOpen, waterLevel, 
                                             shipLocation, lockCommand, 
                                             requests, permissions, perm, req, 
                                             targetWaterLevel, requestedSide, 
                                             oppositeSide >>

ShipMoveWest(self) == /\ pc[self] = "ShipMoveWest"
                      /\ IF perm[self].granted
                            THEN /\ Assert(doorsOpen[IF InLock THEN "west" ELSE "east"], 
                                           "Failure of assertion at line 229, column 13.")
                                 /\ shipLocation' = shipLocation - 1
                            ELSE /\ TRUE
                                 /\ UNCHANGED shipLocation
                      /\ pc' = [pc EXCEPT ![self] = "ShipNextIteration"]
                      /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                      waterLevel, shipStatus, lockCommand, 
                                      requests, permissions, perm, req, 
                                      targetWaterLevel, requestedSide, 
                                      oppositeSide >>

ShipRequestEast(self) == /\ pc[self] = "ShipRequestEast"
                         /\ requests' = Append(requests, ([ship |-> self, lock |-> 1, side |-> "east"]))
                         /\ pc' = [pc EXCEPT ![self] = "ShipWaitForEast"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, permissions, 
                                         perm, req, targetWaterLevel, 
                                         requestedSide, oppositeSide >>

ShipWaitForEast(self) == /\ pc[self] = "ShipWaitForEast"
                         /\ permissions /= <<>>
                         /\ perm' = [perm EXCEPT ![self] = Head(permissions)]
                         /\ permissions' = Tail(permissions)
                         /\ Assert(perm'[self].lock = GetLock(shipLocation-1), 
                                   "Failure of assertion at line 216, column 13.")
                         /\ pc' = [pc EXCEPT ![self] = "ShipMoveWest"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, requests, 
                                         req, targetWaterLevel, requestedSide, 
                                         oppositeSide >>

ShipRequestWestInLock(self) == /\ pc[self] = "ShipRequestWestInLock"
                               /\ requests' = Append(requests, ([ship |-> self, lock |-> 1, side |-> "west"]))
                               /\ pc' = [pc EXCEPT ![self] = "ShipWaitForWestInLock"]
                               /\ UNCHANGED << lockOrientation, doorsOpen, 
                                               valvesOpen, waterLevel, 
                                               shipLocation, shipStatus, 
                                               lockCommand, permissions, perm, 
                                               req, targetWaterLevel, 
                                               requestedSide, oppositeSide >>

ShipWaitForWestInLock(self) == /\ pc[self] = "ShipWaitForWestInLock"
                               /\ permissions /= <<>>
                               /\ perm' = [perm EXCEPT ![self] = Head(permissions)]
                               /\ permissions' = Tail(permissions)
                               /\ Assert(perm'[self].lock = GetLock(shipLocation), 
                                         "Failure of assertion at line 224, column 13.")
                               /\ pc' = [pc EXCEPT ![self] = "ShipMoveWest"]
                               /\ UNCHANGED << lockOrientation, doorsOpen, 
                                               valvesOpen, waterLevel, 
                                               shipLocation, shipStatus, 
                                               lockCommand, requests, req, 
                                               targetWaterLevel, requestedSide, 
                                               oppositeSide >>

shipProcess(self) == ShipNextIteration(self) \/ ShipGoalReachedEast(self)
                        \/ ShipMoveEast(self) \/ ShipRequestWest(self)
                        \/ ShipWaitForWest(self)
                        \/ ShipRequestEastInLock(self)
                        \/ ShipWaitForEastInLock(self)
                        \/ ShipTurnAround(self)
                        \/ ShipGoalReachedWest(self) \/ ShipMoveWest(self)
                        \/ ShipRequestEast(self) \/ ShipWaitForEast(self)
                        \/ ShipRequestWestInLock(self)
                        \/ ShipWaitForWestInLock(self)

ControlLoop == /\ pc[0] = "ControlLoop"
               /\ pc' = [pc EXCEPT ![0] = "ControlReadRequest"]
               /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                               waterLevel, shipLocation, shipStatus, 
                               lockCommand, requests, permissions, perm, req, 
                               targetWaterLevel, requestedSide, oppositeSide >>

ControlReadRequest == /\ pc[0] = "ControlReadRequest"
                      /\ requests /= <<>>
                      /\ req' = Head(requests)
                      /\ requests' = Tail(requests)
                      /\ requestedSide' = req'.side
                      /\ oppositeSide' = (IF requestedSide' = "west" THEN "east" ELSE "west")
                      /\ pc' = [pc EXCEPT ![0] = "ControlCloseDoors"]
                      /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                      waterLevel, shipLocation, shipStatus, 
                                      lockCommand, permissions, perm, 
                                      targetWaterLevel >>

ControlCloseDoors == /\ pc[0] = "ControlCloseDoors"
                     /\ IF doorsOpen[requestedSide]
                           THEN /\ lockCommand' = [command |-> "change_door", open |-> FALSE, side |-> requestedSide]
                                /\ pc' = [pc EXCEPT ![0] = "ControlWaitCloseDoor1"]
                           ELSE /\ pc' = [pc EXCEPT ![0] = "ControlCloseDoor2"]
                                /\ UNCHANGED lockCommand
                     /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                     waterLevel, shipLocation, shipStatus, 
                                     requests, permissions, perm, req, 
                                     targetWaterLevel, requestedSide, 
                                     oppositeSide >>

ControlWaitCloseDoor1 == /\ pc[0] = "ControlWaitCloseDoor1"
                         /\ lockCommand.command = "finished"
                         /\ pc' = [pc EXCEPT ![0] = "ControlCheckOppositeDoor"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, requests, 
                                         permissions, perm, req, 
                                         targetWaterLevel, requestedSide, 
                                         oppositeSide >>

ControlCheckOppositeDoor == /\ pc[0] = "ControlCheckOppositeDoor"
                            /\ TRUE
                            /\ pc' = [pc EXCEPT ![0] = "ControlCloseDoor2"]
                            /\ UNCHANGED << lockOrientation, doorsOpen, 
                                            valvesOpen, waterLevel, 
                                            shipLocation, shipStatus, 
                                            lockCommand, requests, permissions, 
                                            perm, req, targetWaterLevel, 
                                            requestedSide, oppositeSide >>

ControlCloseDoor2 == /\ pc[0] = "ControlCloseDoor2"
                     /\ IF doorsOpen[oppositeSide]
                           THEN /\ lockCommand' = [command |-> "change_door", open |-> FALSE, side |-> oppositeSide]
                                /\ pc' = [pc EXCEPT ![0] = "ControlWaitCloseDoor2"]
                           ELSE /\ pc' = [pc EXCEPT ![0] = "ControlSetTargetLevel"]
                                /\ UNCHANGED lockCommand
                     /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                     waterLevel, shipLocation, shipStatus, 
                                     requests, permissions, perm, req, 
                                     targetWaterLevel, requestedSide, 
                                     oppositeSide >>

ControlWaitCloseDoor2 == /\ pc[0] = "ControlWaitCloseDoor2"
                         /\ lockCommand.command = "finished"
                         /\ pc' = [pc EXCEPT ![0] = "ControlDetermineTargetLevel"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, requests, 
                                         permissions, perm, req, 
                                         targetWaterLevel, requestedSide, 
                                         oppositeSide >>

ControlDetermineTargetLevel == /\ pc[0] = "ControlDetermineTargetLevel"
                               /\ TRUE
                               /\ pc' = [pc EXCEPT ![0] = "ControlSetTargetLevel"]
                               /\ UNCHANGED << lockOrientation, doorsOpen, 
                                               valvesOpen, waterLevel, 
                                               shipLocation, shipStatus, 
                                               lockCommand, requests, 
                                               permissions, perm, req, 
                                               targetWaterLevel, requestedSide, 
                                               oppositeSide >>

ControlSetTargetLevel == /\ pc[0] = "ControlSetTargetLevel"
                         /\ IF requestedSide = LowSide(lockOrientation)
                               THEN /\ targetWaterLevel' = "low"
                               ELSE /\ targetWaterLevel' = "high"
                         /\ pc' = [pc EXCEPT ![0] = "ControlAdjustWaterLevel"]
                         /\ UNCHANGED << lockOrientation, doorsOpen, 
                                         valvesOpen, waterLevel, shipLocation, 
                                         shipStatus, lockCommand, requests, 
                                         permissions, perm, req, requestedSide, 
                                         oppositeSide >>

ControlAdjustWaterLevel == /\ pc[0] = "ControlAdjustWaterLevel"
                           /\ IF waterLevel /= targetWaterLevel
                                 THEN /\ IF targetWaterLevel = "low"
                                            THEN /\ lockCommand' = [command |-> "change_valve", open |-> TRUE, side |-> "low"]
                                                 /\ pc' = [pc EXCEPT ![0] = "ControlWaitValveLow"]
                                            ELSE /\ lockCommand' = [command |-> "change_valve", open |-> TRUE, side |-> "high"]
                                                 /\ pc' = [pc EXCEPT ![0] = "ControlWaitValveHigh"]
                                 ELSE /\ pc' = [pc EXCEPT ![0] = "ControlOpenRequestedDoor"]
                                      /\ UNCHANGED lockCommand
                           /\ UNCHANGED << lockOrientation, doorsOpen, 
                                           valvesOpen, waterLevel, 
                                           shipLocation, shipStatus, requests, 
                                           permissions, perm, req, 
                                           targetWaterLevel, requestedSide, 
                                           oppositeSide >>

ControlWaitValveLow == /\ pc[0] = "ControlWaitValveLow"
                       /\ lockCommand.command = "finished"
                       /\ pc' = [pc EXCEPT ![0] = "ControlWaitWaterLow"]
                       /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                       waterLevel, shipLocation, shipStatus, 
                                       lockCommand, requests, permissions, 
                                       perm, req, targetWaterLevel, 
                                       requestedSide, oppositeSide >>

ControlWaitWaterLow == /\ pc[0] = "ControlWaitWaterLow"
                       /\ waterLevel = "low"
                       /\ lockCommand' = [command |-> "change_valve", open |-> FALSE, side |-> "low"]
                       /\ pc' = [pc EXCEPT ![0] = "ControlWaitCloseValveLow"]
                       /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                       waterLevel, shipLocation, shipStatus, 
                                       requests, permissions, perm, req, 
                                       targetWaterLevel, requestedSide, 
                                       oppositeSide >>

ControlWaitCloseValveLow == /\ pc[0] = "ControlWaitCloseValveLow"
                            /\ lockCommand.command = "finished"
                            /\ pc' = [pc EXCEPT ![0] = "ControlPrepareOpenDoor1"]
                            /\ UNCHANGED << lockOrientation, doorsOpen, 
                                            valvesOpen, waterLevel, 
                                            shipLocation, shipStatus, 
                                            lockCommand, requests, permissions, 
                                            perm, req, targetWaterLevel, 
                                            requestedSide, oppositeSide >>

ControlPrepareOpenDoor1 == /\ pc[0] = "ControlPrepareOpenDoor1"
                           /\ TRUE
                           /\ pc' = [pc EXCEPT ![0] = "ControlOpenRequestedDoor"]
                           /\ UNCHANGED << lockOrientation, doorsOpen, 
                                           valvesOpen, waterLevel, 
                                           shipLocation, shipStatus, 
                                           lockCommand, requests, permissions, 
                                           perm, req, targetWaterLevel, 
                                           requestedSide, oppositeSide >>

ControlWaitValveHigh == /\ pc[0] = "ControlWaitValveHigh"
                        /\ lockCommand.command = "finished"
                        /\ pc' = [pc EXCEPT ![0] = "ControlWaitWaterHigh"]
                        /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                        waterLevel, shipLocation, shipStatus, 
                                        lockCommand, requests, permissions, 
                                        perm, req, targetWaterLevel, 
                                        requestedSide, oppositeSide >>

ControlWaitWaterHigh == /\ pc[0] = "ControlWaitWaterHigh"
                        /\ waterLevel = "high"
                        /\ lockCommand' = [command |-> "change_valve", open |-> FALSE, side |-> "high"]
                        /\ pc' = [pc EXCEPT ![0] = "ControlWaitCloseValveHigh"]
                        /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                        waterLevel, shipLocation, shipStatus, 
                                        requests, permissions, perm, req, 
                                        targetWaterLevel, requestedSide, 
                                        oppositeSide >>

ControlWaitCloseValveHigh == /\ pc[0] = "ControlWaitCloseValveHigh"
                             /\ lockCommand.command = "finished"
                             /\ pc' = [pc EXCEPT ![0] = "ControlPrepareOpenDoor2"]
                             /\ UNCHANGED << lockOrientation, doorsOpen, 
                                             valvesOpen, waterLevel, 
                                             shipLocation, shipStatus, 
                                             lockCommand, requests, 
                                             permissions, perm, req, 
                                             targetWaterLevel, requestedSide, 
                                             oppositeSide >>

ControlPrepareOpenDoor2 == /\ pc[0] = "ControlPrepareOpenDoor2"
                           /\ TRUE
                           /\ pc' = [pc EXCEPT ![0] = "ControlOpenRequestedDoor"]
                           /\ UNCHANGED << lockOrientation, doorsOpen, 
                                           valvesOpen, waterLevel, 
                                           shipLocation, shipStatus, 
                                           lockCommand, requests, permissions, 
                                           perm, req, targetWaterLevel, 
                                           requestedSide, oppositeSide >>

ControlOpenRequestedDoor == /\ pc[0] = "ControlOpenRequestedDoor"
                            /\ lockCommand' = [command |-> "change_door", open |-> TRUE, side |-> requestedSide]
                            /\ pc' = [pc EXCEPT ![0] = "ControlWaitOpenDoor"]
                            /\ UNCHANGED << lockOrientation, doorsOpen, 
                                            valvesOpen, waterLevel, 
                                            shipLocation, shipStatus, requests, 
                                            permissions, perm, req, 
                                            targetWaterLevel, requestedSide, 
                                            oppositeSide >>

ControlWaitOpenDoor == /\ pc[0] = "ControlWaitOpenDoor"
                       /\ lockCommand.command = "finished"
                       /\ pc' = [pc EXCEPT ![0] = "ControlGrantPermission"]
                       /\ UNCHANGED << lockOrientation, doorsOpen, valvesOpen, 
                                       waterLevel, shipLocation, shipStatus, 
                                       lockCommand, requests, permissions, 
                                       perm, req, targetWaterLevel, 
                                       requestedSide, oppositeSide >>

ControlGrantPermission == /\ pc[0] = "ControlGrantPermission"
                          /\ permissions' = Append(permissions, ([lock |-> req.lock, granted |-> TRUE]))
                          /\ pc' = [pc EXCEPT ![0] = "ControlLoop"]
                          /\ UNCHANGED << lockOrientation, doorsOpen, 
                                          valvesOpen, waterLevel, shipLocation, 
                                          shipStatus, lockCommand, requests, 
                                          perm, req, targetWaterLevel, 
                                          requestedSide, oppositeSide >>

controlProcess == ControlLoop \/ ControlReadRequest \/ ControlCloseDoors
                     \/ ControlWaitCloseDoor1 \/ ControlCheckOppositeDoor
                     \/ ControlCloseDoor2 \/ ControlWaitCloseDoor2
                     \/ ControlDetermineTargetLevel
                     \/ ControlSetTargetLevel \/ ControlAdjustWaterLevel
                     \/ ControlWaitValveLow \/ ControlWaitWaterLow
                     \/ ControlWaitCloseValveLow \/ ControlPrepareOpenDoor1
                     \/ ControlWaitValveHigh \/ ControlWaitWaterHigh
                     \/ ControlWaitCloseValveHigh
                     \/ ControlPrepareOpenDoor2 \/ ControlOpenRequestedDoor
                     \/ ControlWaitOpenDoor \/ ControlGrantPermission

Next == controlProcess
           \/ (\E self \in Locks: lockProcess(self))
           \/ (\E self \in Ships: shipProcess(self))

Spec == Init /\ [][Next]_vars

\* END TRANSLATION 

\* Fairness specification - ensures liveness properties hold
FairSpec == Spec 
            /\ WF_vars(controlProcess)
            /\ \A l \in Locks : WF_vars(lockProcess(l))
            /\ \A s \in Ships : WF_vars(shipProcess(s))

=============================================================================
\* Modification History
\* Last modified Wed Sep 24 11:08:53 CEST 2025 by mvolk
\* Created Thu Aug 28 11:30:23 CEST 2025 by mvolk
